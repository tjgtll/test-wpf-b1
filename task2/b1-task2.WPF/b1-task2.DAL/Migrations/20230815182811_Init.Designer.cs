// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using b1_task2.DAL.DataDbContext;

#nullable disable

namespace b1_task2.DAL.Migrations
{
    [DbContext(typeof(b1TaskDbContext))]
    [Migration("20230815182811_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("b1_task2.DAL.Entities.BalanceSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BalanceSheets");
                });

            modelBuilder.Entity("b1_task2.DAL.Entities.BankAccountMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BalanceSheetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BankAccountNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("OpeningBalanceActive")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OpeningBalancePassive")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TurnoverCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TurnoverDebit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("СlosingBalanceActive")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("СlosingBalancePassive")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BalanceSheetId");

                    b.ToTable("BankAccountMovements");
                });

            modelBuilder.Entity("b1_task2.DAL.Entities.ChartOfAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BankAccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChartOfAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3654bc95-64ee-4a2f-95a3-c01b972a5f9d"),
                            BankAccountNumber = 1,
                            Name = "Денежные средства, драгоценные металлы и межбанковские операции",
                            TypeAccount = "-"
                        },
                        new
                        {
                            Id = new Guid("7f6cf8d7-383d-4950-b042-39474faedc4e"),
                            BankAccountNumber = 2,
                            Name = "Кредитные и иные активные операции с клиентами",
                            TypeAccount = "-"
                        },
                        new
                        {
                            Id = new Guid("f8d2ade1-fb8d-434a-8a52-b3b1d9a3f9ce"),
                            BankAccountNumber = 3,
                            Name = "Счета по операциям клиентов",
                            TypeAccount = "-"
                        },
                        new
                        {
                            Id = new Guid("1697acae-aa75-47c1-aa07-10b9f38548e1"),
                            BankAccountNumber = 4,
                            Name = "Ценные бумаги",
                            TypeAccount = "-"
                        },
                        new
                        {
                            Id = new Guid("bdd1223a-a93c-49a7-b9e5-9b74afc87286"),
                            BankAccountNumber = 5,
                            Name = "Долгосрочные финансовые вложения в уставные фонды юридических лиц, основные средства и прочее имущество",
                            TypeAccount = "-"
                        },
                        new
                        {
                            Id = new Guid("ec633c48-7b76-4864-b5ce-a30308c0f866"),
                            BankAccountNumber = 6,
                            Name = "Прочие активы и прочие пассивы",
                            TypeAccount = "-"
                        },
                        new
                        {
                            Id = new Guid("9f3ef987-e6ea-4ac5-818d-ab7f09453845"),
                            BankAccountNumber = 7,
                            Name = "Собственный капитал банка",
                            TypeAccount = "-"
                        },
                        new
                        {
                            Id = new Guid("de4f02f0-0d7d-49b0-9a88-0c41016e9587"),
                            BankAccountNumber = 8,
                            Name = "Доходы банка",
                            TypeAccount = "-"
                        },
                        new
                        {
                            Id = new Guid("d1e211f1-0bc4-4220-bf82-957dd9604a66"),
                            BankAccountNumber = 9,
                            Name = "Расходы банка",
                            TypeAccount = "-"
                        });
                });

            modelBuilder.Entity("b1_task2.DAL.Entities.BankAccountMovement", b =>
                {
                    b.HasOne("b1_task2.DAL.Entities.BalanceSheet", null)
                        .WithMany("BankAccountMovements")
                        .HasForeignKey("BalanceSheetId");
                });

            modelBuilder.Entity("b1_task2.DAL.Entities.BalanceSheet", b =>
                {
                    b.Navigation("BankAccountMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
